import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:async';
import '../services/gemini_service.dart';

class MedicalSummaryScreen extends StatefulWidget {
  final String userId;

  const MedicalSummaryScreen({super.key, required this.userId});

  @override
  State<MedicalSummaryScreen> createState() => _MedicalSummaryScreenState();
}

class _MedicalSummaryScreenState extends State<MedicalSummaryScreen> {
  final GeminiService _geminiService = GeminiService();
  bool _isLoading = true;
  String _summary = '';
  StreamSubscription<User?>? _authSubscription;

  @override
  void initState() {
    super.initState();
    _setupAuthListener();
    _loadSummary();
  }

  void _setupAuthListener() {
    _authSubscription = FirebaseAuth.instance.authStateChanges().listen((
      User? user,
    ) {
      if (user == null) {
        // User signed out, navigate back or show error
        if (mounted) {
          Navigator.of(context).pop();
        }
      }
    });
  }

  @override
  void dispose() {
    _authSubscription?.cancel();
    super.dispose();
  }

  Future<void> _loadSummary() async {
    setState(() => _isLoading = true);

    try {
      // Double-check authentication
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        setState(() {
          _summary = 'Authentication error: User not logged in';
          _isLoading = false;
        });
        return;
      }

      print('üîç Current user: ${user.uid}');
      print('üîç Widget userId: ${widget.userId}');
      print('üîç User email: ${user.email}');

      // First, test the debug function to ensure connectivity
      try {
        print('üîß Testing debug function...');
        final debugResult = await _geminiService.debugCloudFunction();
        print('‚úÖ Debug function result: $debugResult');
      } catch (debugError) {
        print('‚ùå Debug function failed: $debugError');
        setState(() {
          _summary = 'Debug test failed: $debugError';
          _isLoading = false;
        });
        return;
      }

      // If debug passes, try the actual analysis
      final summary = await _geminiService.analyzeMedicalRecords(user.uid);

      setState(() {
        _summary = summary;
        _isLoading = false;
      });
    } catch (e) {
      print('‚ùå Error in _loadSummary: $e');
      setState(() {
        _summary = 'Error loading summary: $e';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Medical Summary'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadSummary,
            tooltip: 'Refresh summary',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Your Medical History Summary',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Generated by AI based on your medical records',
                    style: TextStyle(fontSize: 14, color: Colors.grey),
                  ),
                  const Divider(height: 32),
                  Text(_summary),
                ],
              ),
            ),
    );
  }
}
