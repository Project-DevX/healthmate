import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'login.dart';
import 'register.dart';
import 'patientDashboard.dart'; // Import the patient dashboard
import 'auth_wrapper.dart';
import 'doctorReg.dart';
import 'caregiverReg.dart';
import 'hospitalRegNew.dart';
import 'pharmacyReg.dart';
import 'labReg.dart';
import 'screens/doctor_dashboard.dart';
import 'screens/hospital_dashboard.dart';
import 'screens/caregiver_dashboard.dart';
import 'screens/lab_dashboard.dart';
import 'screens/pharmacy_dashboard.dart';
import 'screens/pharmacy_dashboard_new.dart';
import 'screens/trend_analysis_screen.dart';
import 'theme/app_theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HealthMate',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: ThemeMode.dark, // Set default to dark mode
      // Global error handling
      builder: (context, widget) {
        ErrorWidget.builder = (FlutterErrorDetails errorDetails) {
          return CustomErrorWidget(errorDetails: errorDetails);
        };
        return widget!;
      },

      initialRoute: '/',
      onGenerateRoute: (settings) {
        if (settings.name == '/register') {
          return MaterialPageRoute(builder: (_) => const RegisterPage());
        } else if (settings.name == '/') {
          return MaterialPageRoute(builder: (_) => const AuthWrapper());
        } else if (settings.name == '/login') {
          return MaterialPageRoute(builder: (_) => const LoginPage());
        } else if (settings.name == '/patientDashboard') {
          return MaterialPageRoute(builder: (_) => const PatientDashboard());
        } else if (settings.name == '/doctorRegister') {
          return MaterialPageRoute(
            builder: (_) => const DoctorRegistrationPage(),
          );
        } else if (settings.name == '/caregiverRegister') {
          return MaterialPageRoute(
            builder: (_) => const CaregiverRegistrationPage(),
          );
        } else if (settings.name == '/hospitalRegister') {
          return MaterialPageRoute(
            builder: (_) => const HospitalRegistrationPage(),
          );
        } else if (settings.name == '/pharmacyRegister') {
          return MaterialPageRoute(
            builder: (_) => const PharmacyRegistrationPage(),
          );
        } else if (settings.name == '/labRegister') {
          return MaterialPageRoute(builder: (_) => const LabRegistrationPage());
        } else if (settings.name == '/doctorDashboard') {
          return MaterialPageRoute(builder: (_) => const DoctorDashboard());
        } else if (settings.name == '/hospitalDashboard') {
          return MaterialPageRoute(builder: (_) => const HospitalDashboard());
        } else if (settings.name == '/caregiverDashboard') {
          return MaterialPageRoute(builder: (_) => const CaregiverDashboard());
        } else if (settings.name == '/labDashboard') {
          return MaterialPageRoute(builder: (_) => const LabDashboard());
        } else if (settings.name == '/pharmacyDashboard') {
          return MaterialPageRoute(
            builder: (_) => const PharmacyDashboardPage(),
          );
        } else if (settings.name == '/trends') {
          return MaterialPageRoute(builder: (_) => const TrendAnalysisScreen());
        } else if (settings.name == '/trends/lab-type') {
          final args = settings.arguments as Map<String, String>?;
          return MaterialPageRoute(
            builder: (_) =>
                TrendAnalysisScreen(labReportType: args?['labReportType']),
          );
        }
        // Handle unknown routes
        return MaterialPageRoute(builder: (_) => const AuthWrapper());
      },
      // Keep the routes map as a fallback
      routes: {
        '/': (context) => const AuthWrapper(),
        '/login': (context) => const LoginPage(),
        '/register': (context) => const RegisterPage(),
        '/patientDashboard': (context) => const PatientDashboard(),
        '/doctorRegister': (context) => const DoctorRegistrationPage(),
        '/caregiverRegister': (context) => const CaregiverRegistrationPage(),
        '/hospitalRegister': (context) => const HospitalRegistrationPage(),
        '/pharmacyRegister': (context) => const PharmacyRegistrationPage(),
        '/labRegister': (context) => const LabRegistrationPage(),
        '/doctorDashboard': (context) => const DoctorDashboard(),
        '/hospitalDashboard': (context) => const HospitalDashboard(),
        '/caregiverDashboard': (context) => const CaregiverDashboard(),
        '/labDashboard': (context) => const LabDashboard(),
        '/pharmacyDashboard': (context) => const PharmacyDashboardNew(),
        '/pharmacyDashboardOld': (context) => const PharmacyDashboardPage(),
        '/trends': (context) => const TrendAnalysisScreen(),
      },
    );
  }
}

class CustomErrorWidget extends StatelessWidget {
  final FlutterErrorDetails errorDetails;

  const CustomErrorWidget({Key? key, required this.errorDetails})
    : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Material(
      child: Container(
        color: Colors.red[50],
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error, size: 48, color: Colors.red[700]),
              const SizedBox(height: 16),
              const Text('Something went wrong'),
              const SizedBox(height: 8),
              Text(
                'Please try again later',
                style: TextStyle(color: Colors.grey[600]),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
